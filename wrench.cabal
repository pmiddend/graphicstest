name:                wrench
category:            Game
version:             0.1.0.0
license:             GPL-3
cabal-version:       >=1.10
license-file:        LICENSE
author:              Philipp Middendorf
maintainer:          Philipp Middendorf <pmidden@secure.mailbox.org>
homepage:            http://github.com/pmiddend/wrench/
bug-reports:         http://github.com/pmiddend/wrench/issues
copyright:           Copyright (C) 2014-2015 Philipp Middendorf
build-type:          Simple
tested-with:         GHC == 7.8.3, GHC == 7.10.2
synopsis:            2D graphics and audio framework
description:
  `wrench` is a library to ease the development of games featuring 2D
  graphics, sound and standard input controllers (mouse, keyboard,
  joystick). It currently has an SDL2 image backend, uses JuicyPixels for
  image loading and AL for audio playback. It also has an sge backend (an
  engine written in C++ by a friend of mine).
  .          
  It has multiple layers of abstraction you can choose from. You could
  use its 'Platform' type to have an abstraction over 2D rendering,
  image loading and sound and build your own engine on top of that:
  .
  > main :: IO ()
  >   main = withPlatform "window title" DynamicWindowSize MouseGrabNo $ \platform -> do
  >   image <- loadImage platform "media/tux.png"
  >   forever $ do
  >      renderClear platform colorsGreen
  >      let sourceRectangle = rectFromOriginAndDim (V2 0 0) (V2 32 32)
  >          destinationRectangle = rectFromOriginAndDim (V2 0 0) (V2 32 32)     
  >      renderSprites
  >           platform
  >           [SpriteInstance image sourceRectangle destinationRectangle]
  >           (Radians 0)
  >           colorsWhite
  >      renderFinish platform
  .
  Or you could use the 'MonadGame' monad to have some more facilities
  like FPS capping, automatic loading of sounds and atlased images:
  .
  > spaceKeyPressed :: [Event] -> Bool
  > spaceKeyPressed events = has (traverse . _Keyboard . keySym . filtered (== Key.Space)) events
  >
  > mainLoop = do
  >  events <- gpollEvents
  >  unless (spaceKeyPressed events) $ do
  >    carImageSize <- (view rectDimensions) <$> glookupImageRectangleUnsafe "car"
  >    grender (pictureSprite "car" carImageSize :: Picture Int Float)
  >    mainLoop
  >
  > main :: IO ()
  > main = do
  >    let backgroundColor = colorsBlack
  >    runGame "media" "window title" DynamicWindowSize MouseGrabNo backgroundColor (RenderAndWait 30) mainLoop
  .
  To get to know wrench, look at the examples. They're small
  and self-contained. Otherwise, 'Platform' and 'MonadGame' are good starting points for browsing the documentation.

source-repository head
  type: git
  location: git://github.com/pmiddend/wrench.git

flag sge
  Description: Use SGE as backend
  Default: False

flag sdl
  Description: Use hackage sdl2 as backend
  Default: True

flag openal
  Description: Use openal as audio backend
  Default: False

library
  hs-source-dirs:      src
  other-modules:       Wrench.Filesystem
                     , Wrench.List
                     , Wrench.Internal.Picture
  exposed-modules:     Wrench.Angular
                     , Wrench.Color
                     , Wrench.Engine
                     , Wrench.WindowSize
                     , Wrench.MediaData
                     , Wrench.AudioData
                     , Wrench.MonadGame
                     , Wrench.ImageData
                     , Wrench.Keysym
                     , Wrench.Rectangle
                     , Wrench.Time
                     , Wrench.BitmapFont.Render
                     , Wrench.BitmapFont.RenderResult
                     , Wrench.AudioFile
                     , Wrench.Picture
                     , Wrench.Platform
                     , Wrench.Keydowns
                     , Wrench.MouseButtonMovement
                     , Wrench.MouseButton
                     , Wrench.SpriteIdentifier
                     , Wrench.CommonGeometry
                     , Wrench.KeyMovement
                     , Wrench.Event
                     , Wrench.ImageParser
                     , Wrench.RenderTargetFps
                     , Wrench.RenderBlockMode
                     , Wrench.MouseGrabMode
                     , Wrench.Animation
                     , Wrench.ViewportSize
                     , Wrench.AnimMap
                     , Wrench.AnimIdentifier
                     , Wrench.PlayMode
                     , Wrench.ImageIdentifier
                     , Wrench.ImageMap
  build-depends:       base >=4.7 && <5
                     , linear
                     , lens
                     , containers
                     , text
                     , attoparsec
                     , filepath
                     , directory
                     , monad-loops
                     , clock
                     , transformers
                     , MonadRandom
                     , random
                     , scientific
                     , mtl
                     , lifted-base
                     , classy-prelude
                     , resourcet
                     , vector
  if flag(openal)
    build-depends:     al
    other-modules:     Wrench.AL2D.AlBufferFormat
                     , Wrench.AL2D.AlBuffer
                     , Wrench.AL2D.AlSource
                     , Wrench.AL2D.AlcContextFlag
                     , Wrench.AL2D.AlHelper
                     , Wrench.AL2D.FFIHelper
    cpp-options:       -DUSE_OPENAL
  if flag(sge)
    build-depends:     hsge
    cpp-options:       -DUSE_SGE
    other-modules:     Wrench.Backends.Sge.SGEPlatform
  else
    if flag(sdl)
      build-depends:     sdl2 >= 2.0.0
                       , JuicyPixels
                       , byteorder
                       , StateVar
      cpp-options:       -DUSE_SDL
      other-modules:     Wrench.Backends.Sdl.Sdl2Platform
                       , Wrench.Backends.Sdl.Sdl2AudioLoader
                       , Wrench.Backends.Sdl.Sdl2AudioFile

  -- hs-source-dirs:
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
                    , OverloadedStrings
  ghc-options: -Wall

executable example_time
  main-is:             Time.hs
  hs-source-dirs:      examples
  -- other-extensions:
  build-depends:       base >=4.7 && <5
                     , wrench
                     , classy-prelude
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
                    , OverloadedStrings
  ghc-options: -Wall

executable example_monadgame
  main-is:             MonadGame.hs
  hs-source-dirs:      examples
  -- other-extensions:
  build-depends:       base >=4.7 && <5
                     , wrench
                     , classy-prelude
                     , lens
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
                    , OverloadedStrings
  ghc-options: -Wall

executable example_solar_system
  main-is:             SolarSystem.hs
  hs-source-dirs:      examples
  -- other-extensions:
  build-depends:       base >=4.7 && <5
                     , wrench
                     , classy-prelude
                     , lens
                     , linear
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
                    , OverloadedStrings
  ghc-options: -Wall

executable example_animation
  main-is:             Animation.hs
  hs-source-dirs:      examples
  -- other-extensions:
  build-depends:       base >=4.7 && <5
                     , wrench
                     , classy-prelude
                     , lens
                     , linear
                     , filepath
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
                    , OverloadedStrings
  ghc-options: -Wall

  
executable example_sound
  main-is:             Sound.hs
  hs-source-dirs:      examples
  -- other-extensions:
  build-depends:       base >=4.7 && <5
                     , wrench
                     , classy-prelude
  if flag(sge)
    build-depends:     hsge
    cpp-options:       -DUSE_SGE
  -- hs-source-dirs:
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
                    , OverloadedStrings
  ghc-options: -Wall

executable example_bitmapfont
  main-is:             BitmapFont.hs
  hs-source-dirs:      examples
  -- other-extensions:
  build-depends:       base >=4.7 && <5
                     , wrench
                     , lens
                     , linear
                     , classy-prelude
                     , filepath
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
                    , OverloadedStrings
  ghc-options: -Wall

test-suite hunit
  type:                exitcode-stdio-1.0
  main-is:             Main.hs
  hs-source-dirs:      tests/
  build-depends:       base >=4.7 && <4.8
                     , test-framework
                     , test-framework-hunit
                     , HUnit
                     , wrench
                     , classy-prelude
                     , bytestring
                     , linear
  default-language:    Haskell2010
  default-extensions: NoImplicitPrelude
